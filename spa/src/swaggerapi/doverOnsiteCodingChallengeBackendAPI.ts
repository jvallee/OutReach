/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { DoverOnsiteCodingChallengeBackendAPIContext } from "./doverOnsiteCodingChallengeBackendAPIContext";

class DoverOnsiteCodingChallengeBackendAPI extends DoverOnsiteCodingChallengeBackendAPIContext {
  // Operation groups
  api: operations.Api;
  authToken: operations.AuthToken;

  /**
   * Initializes a new instance of the DoverOnsiteCodingChallengeBackendAPI class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.DoverOnsiteCodingChallengeBackendAPIOptions) {
    super(options);
    this.api = new operations.Api(this);
    this.authToken = new operations.AuthToken(this);
  }

  /**
   * list oureach
   * @param [options] The optional parameters
   * @returns Promise<Models.ListOutreachResponse>
   */
  listOutreach(options?: Models.DoverOnsiteCodingChallengeBackendAPIListOutreachOptionalParams): Promise<Models.ListOutreachResponse>;
  /**
   * @param callback The callback
   */
  listOutreach(callback: msRest.ServiceCallback<Models.ListOutreachOKResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listOutreach(options: Models.DoverOnsiteCodingChallengeBackendAPIListOutreachOptionalParams, callback: msRest.ServiceCallback<Models.ListOutreachOKResponse>): void;
  listOutreach(options?: Models.DoverOnsiteCodingChallengeBackendAPIListOutreachOptionalParams | msRest.ServiceCallback<Models.ListOutreachOKResponse>, callback?: msRest.ServiceCallback<Models.ListOutreachOKResponse>): Promise<Models.ListOutreachResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listOutreachOperationSpec,
      callback) as Promise<Models.ListOutreachResponse>;
  }

  /**
   * create outreach
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOutreachResponse>
   */
  createOutreach(data: Models.Outreach, options?: msRest.RequestOptionsBase): Promise<Models.CreateOutreachResponse>;
  /**
   * @param data
   * @param callback The callback
   */
  createOutreach(data: Models.Outreach, callback: msRest.ServiceCallback<Models.Outreach>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  createOutreach(data: Models.Outreach, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Outreach>): void;
  createOutreach(data: Models.Outreach, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Outreach>, callback?: msRest.ServiceCallback<Models.Outreach>): Promise<Models.CreateOutreachResponse> {
    return this.sendOperationRequest(
      {
        data,
        options
      },
      createOutreachOperationSpec,
      callback) as Promise<Models.CreateOutreachResponse>;
  }

  /**
   * retrieve outreach
   * @param id A UUID string identifying this outreach.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetOutreachResponse>
   */
  getOutreach(id: string, options?: msRest.RequestOptionsBase): Promise<Models.GetOutreachResponse>;
  /**
   * @param id A UUID string identifying this outreach.
   * @param callback The callback
   */
  getOutreach(id: string, callback: msRest.ServiceCallback<Models.Outreach>): void;
  /**
   * @param id A UUID string identifying this outreach.
   * @param options The optional parameters
   * @param callback The callback
   */
  getOutreach(id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Outreach>): void;
  getOutreach(id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Outreach>, callback?: msRest.ServiceCallback<Models.Outreach>): Promise<Models.GetOutreachResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getOutreachOperationSpec,
      callback) as Promise<Models.GetOutreachResponse>;
  }

  /**
   * update oureach
   * @param data
   * @param id A UUID string identifying this outreach.
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateOutreachResponse>
   */
  updateOutreach(data: Models.Outreach, id: string, options?: msRest.RequestOptionsBase): Promise<Models.UpdateOutreachResponse>;
  /**
   * @param data
   * @param id A UUID string identifying this outreach.
   * @param callback The callback
   */
  updateOutreach(data: Models.Outreach, id: string, callback: msRest.ServiceCallback<Models.Outreach>): void;
  /**
   * @param data
   * @param id A UUID string identifying this outreach.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateOutreach(data: Models.Outreach, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Outreach>): void;
  updateOutreach(data: Models.Outreach, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Outreach>, callback?: msRest.ServiceCallback<Models.Outreach>): Promise<Models.UpdateOutreachResponse> {
    return this.sendOperationRequest(
      {
        data,
        id,
        options
      },
      updateOutreachOperationSpec,
      callback) as Promise<Models.UpdateOutreachResponse>;
  }

  /**
   * partial update oureach
   * @param data
   * @param id A UUID string identifying this outreach.
   * @param [options] The optional parameters
   * @returns Promise<Models.PartialUpdateOutreachResponse>
   */
  partialUpdateOutreach(data: Models.Outreach, id: string, options?: msRest.RequestOptionsBase): Promise<Models.PartialUpdateOutreachResponse>;
  /**
   * @param data
   * @param id A UUID string identifying this outreach.
   * @param callback The callback
   */
  partialUpdateOutreach(data: Models.Outreach, id: string, callback: msRest.ServiceCallback<Models.Outreach>): void;
  /**
   * @param data
   * @param id A UUID string identifying this outreach.
   * @param options The optional parameters
   * @param callback The callback
   */
  partialUpdateOutreach(data: Models.Outreach, id: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Outreach>): void;
  partialUpdateOutreach(data: Models.Outreach, id: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Outreach>, callback?: msRest.ServiceCallback<Models.Outreach>): Promise<Models.PartialUpdateOutreachResponse> {
    return this.sendOperationRequest(
      {
        data,
        id,
        options
      },
      partialUpdateOutreachOperationSpec,
      callback) as Promise<Models.PartialUpdateOutreachResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOutreachOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/outreach",
  queryParameters: [
    Parameters.ordering,
    Parameters.search,
    Parameters.state,
    Parameters.limit,
    Parameters.offset
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListOutreachOKResponse
    },
    default: {}
  },
  serializer
};

const createOutreachOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "api/outreach",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Outreach,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Outreach
    },
    default: {}
  },
  serializer
};

const getOutreachOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/outreach/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Outreach
    },
    default: {}
  },
  serializer
};

const updateOutreachOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "api/outreach/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Outreach,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Outreach
    },
    default: {}
  },
  serializer
};

const partialUpdateOutreachOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "api/outreach/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.Outreach,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Outreach
    },
    default: {}
  },
  serializer
};

export {
  DoverOnsiteCodingChallengeBackendAPI,
  DoverOnsiteCodingChallengeBackendAPIContext,
  Models as DoverOnsiteCodingChallengeBackendAPIModels,
  Mappers as DoverOnsiteCodingChallengeBackendAPIMappers
};
export * from "./operations";
